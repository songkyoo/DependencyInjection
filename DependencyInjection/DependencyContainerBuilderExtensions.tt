<#@ template language="C#" #>
<#@ output extension=".cs" #>
// <auto-generated />
namespace Macaron.DependencyInjection;

public static class DependencyContainerBuilderExtensions
{
    #region Instance
    public static void RegisterSingleton<T>(
        this DependencyContainerBuilder dependencyContainerBuilder,
        Key<T> key,
        T instance
    ) where T : notnull
    {
        dependencyContainerBuilder.Register(key, factory: _ => instance, LifeTime.Singleton);
    }
    #endregion

<#
foreach (var scope in new[] { "Transient", "Scoped", "Singleton" })
{
#>
    #region <#= scope #>
    public static void Register<#= scope #><T>(
        this DependencyContainerBuilder dependencyContainerBuilder,
        Key<T> key,
        Func<IDependencyResolver, T> factory
    ) where T : notnull
    {
        dependencyContainerBuilder.Register(key, factory, LifeTime.<#= scope #>);
    }

    public static void Register<#= scope #><T>(
        this DependencyContainerBuilder dependencyContainerBuilder,
        Key<T> key,
        Func<T> factory
    ) where T : notnull
    {
        dependencyContainerBuilder.Register(key, factory: _ => factory.Invoke(), LifeTime.<#= scope #>);
    }

    public static void Register<#= scope #><T>(
        this DependencyContainerBuilder dependencyContainerBuilder,
        Func<IDependencyResolver, T> factory
    ) where T : notnull
    {
        dependencyContainerBuilder.Register(Key.Of<T>(), factory, LifeTime.<#= scope #>);
    }

    public static void Register<#= scope #><T>(
        this DependencyContainerBuilder dependencyContainerBuilder,
        Func<T> factory
    ) where T : notnull
    {
        dependencyContainerBuilder.Register(Key.Of<T>(), factory: _ => factory.Invoke(), LifeTime.<#= scope #>);
    }

    public static void Register<#= scope #><T>(
        this DependencyContainerBuilder dependencyContainerBuilder,
        Key<T> key
    ) where T : notnull, new()
    {
        dependencyContainerBuilder.Register(key, factory: _ => new T(), LifeTime.<#= scope #>);
    }

    public static void Register<#= scope #><T>(
        this DependencyContainerBuilder dependencyContainerBuilder
    ) where T : notnull, new()
    {
        dependencyContainerBuilder.Register(Key.Of<T>(), factory: _ => new T(), LifeTime.<#= scope #>);
    }
    #endregion

<#
}
#>
}
