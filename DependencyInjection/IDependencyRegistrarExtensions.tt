<#@ template language="C#" #>
<#@ output extension=".cs" #>
// <auto-generated />
using Macaron.DependencyInjection.Internal;

namespace Macaron.DependencyInjection;

public static partial class IDependencyRegistrarExtensions
{
    public static void Register<T>(
        this IDependencyRegistrar dependencyRegistrar,
        Key<T> key, Func<IDependencyResolver, T> factory,
        LifeTime lifeTime
    ) where T : notnull
    {
        dependencyRegistrar.Register(
            key,
            factory: dependencyResolver => factory.Invoke(dependencyResolver, key.Type),
            lifeTime
        );
    }

    public static void Register<T>(
        this IDependencyRegistrar dependencyRegistrar,
        Key<T> key,
        Func<T> factory,
        LifeTime lifeTime
    ) where T : notnull
    {
        dependencyRegistrar.Register(key, factory: _ => factory.Invoke(), lifeTime);
    }

    public static void Register<T>(
        this IDependencyRegistrar dependencyRegistrar,
        Func<IDependencyResolver, T> factory,
        LifeTime lifeTime
    ) where T : notnull
    {
        dependencyRegistrar.Register(key: Key.Of<T>(), factory, lifeTime);
    }

    public static void Register<T>(
        this IDependencyRegistrar dependencyRegistrar,
        Func<T> factory,
        LifeTime lifeTime
    ) where T : notnull
    {
        dependencyRegistrar.Register(key: Key.Of<T>(), factory: _ => factory.Invoke(), lifeTime);
    }

    public static void Register<T>(
        this IDependencyRegistrar dependencyRegistrar,
        Key<T> key,
        LifeTime lifeTime
    ) where T : notnull, new()
    {
        dependencyRegistrar.Register(key, factory: _ => new T(), lifeTime);
    }

    public static void Register<TInterface, TImplementation>(
        this IDependencyRegistrar dependencyRegistrar,
        Key<TInterface> key,
        LifeTime lifeTime
    )
        where TInterface : notnull
        where TImplementation : TInterface, new()
    {
        dependencyRegistrar.Register(key: Key.Of<TInterface>(), factory: _ => new TImplementation(), lifeTime);
    }

    public static void Register<T>(
        this IDependencyRegistrar dependencyRegistrar,
        LifeTime lifeTime
    ) where T : notnull, new()
    {
        dependencyRegistrar.Register(key: Key.Of<T>(), factory: _ => new T(), lifeTime);
    }

    public static void Register<TInterface, TImplementation>(
        this IDependencyRegistrar dependencyRegistrar,
        LifeTime lifeTime
    )
        where TInterface : notnull
        where TImplementation : TInterface, new()
    {
        dependencyRegistrar.Register(key: Key.Of<TInterface>(), factory: _ => new TImplementation(), lifeTime);
    }

<#
foreach (var scope in new[] { "Transient", "Scoped", "Singleton" })
{
#>
    #region <#= scope #>
    public static void Register<#= scope #><T>(
        this IDependencyRegistrar dependencyRegistrar,
        Key<T> key,
        Func<IDependencyResolver, T> factory
    ) where T : notnull
    {
        dependencyRegistrar.Register(key, factory, lifeTime: LifeTime.<#= scope #>);
    }

    public static void Register<#= scope #><T>(
        this IDependencyRegistrar dependencyRegistrar,
        Key<T> key,
        Func<T> factory
    ) where T : notnull
    {
        dependencyRegistrar.Register(key, factory: _ => factory.Invoke(), lifeTime: LifeTime.<#= scope #>);
    }

    public static void Register<#= scope #><T>(
        this IDependencyRegistrar dependencyRegistrar,
        Func<IDependencyResolver, T> factory
    ) where T : notnull
    {
        dependencyRegistrar.Register(key: Key.Of<T>(), factory, lifeTime: LifeTime.<#= scope #>);
    }

    public static void Register<#= scope #><T>(
        this IDependencyRegistrar dependencyRegistrar,
        Func<T> factory
    ) where T : notnull
    {
        dependencyRegistrar.Register(
            key: Key.Of<T>(),
            factory: _ => factory.Invoke(),
            lifeTime: LifeTime.<#= scope #>
        );
    }

    public static void Register<#= scope #><T>(
        this IDependencyRegistrar dependencyRegistrar,
        Key<T> key
    ) where T : notnull, new()
    {
        dependencyRegistrar.Register(key, factory: _ => new T(), lifeTime: LifeTime.<#= scope #>);
    }

    public static void Register<#= scope #><TInterface, TImplementation>(
        this IDependencyRegistrar dependencyRegistrar,
        Key<TInterface> key
    )
        where TInterface : notnull
        where TImplementation : TInterface, new()
    {
        dependencyRegistrar.Register(key, factory: _ => new TImplementation(), lifeTime: LifeTime.<#= scope #>);
    }

    public static void Register<#= scope #><T>(
        this IDependencyRegistrar dependencyRegistrar
    ) where T : notnull, new()
    {
        dependencyRegistrar.Register(key: Key.Of<T>(), factory: _ => new T(), lifeTime: LifeTime.<#= scope #>);
    }

    public static void Register<#= scope #><TInterface, TImplementation>(
        this IDependencyRegistrar dependencyRegistrar
    )
        where TInterface : notnull
        where TImplementation : TInterface, new()
    {
        dependencyRegistrar.Register(
            key: Key.Of<TInterface>(),
            factory: _ => new TImplementation(),
            lifeTime: LifeTime.<#= scope #>
        );
    }
    #endregion

<#
}
#>
    #region Instance
    public static void RegisterSingleton<T>(
        this IDependencyRegistrar dependencyRegistrar,
        Key<T> key,
        T instance
    ) where T : notnull
    {
        dependencyRegistrar.Register(key, factory: _ => instance, LifeTime.Singleton);
    }
    #endregion
}
