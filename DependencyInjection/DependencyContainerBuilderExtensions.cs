// <auto-generated />
namespace Macaron.DependencyInjection;

public static class DependencyContainerBuilderExtensions
{
    #region Transient
    public static void RegisterTransient<T>(
        this DependencyContainerBuilder dependencyContainerBuilder,
        Key<T> key,
        Func<IDependencyResolver, T> factory
    ) where T : notnull
    {
        dependencyContainerBuilder.Register(key, factory, lifeTime: LifeTime.Transient);
    }

    public static void RegisterTransient<T>(
        this DependencyContainerBuilder dependencyContainerBuilder,
        Key<T> key,
        Func<T> factory
    ) where T : notnull
    {
        dependencyContainerBuilder.Register(key, factory: _ => factory.Invoke(), lifeTime: LifeTime.Transient);
    }

    public static void RegisterTransient<T>(
        this DependencyContainerBuilder dependencyContainerBuilder,
        Func<IDependencyResolver, T> factory
    ) where T : notnull
    {
        dependencyContainerBuilder.Register(key: Key.Of<T>(), factory, lifeTime: LifeTime.Transient);
    }

    public static void RegisterTransient<T>(
        this DependencyContainerBuilder dependencyContainerBuilder,
        Func<T> factory
    ) where T : notnull
    {
        dependencyContainerBuilder.Register(
            key: Key.Of<T>(),
            factory: _ => factory.Invoke(),
            lifeTime: LifeTime.Transient
        );
    }

    public static void RegisterTransient<T>(
        this DependencyContainerBuilder dependencyContainerBuilder,
        Key<T> key
    ) where T : notnull, new()
    {
        dependencyContainerBuilder.Register(key, factory: _ => new T(), lifeTime: LifeTime.Transient);
    }

    public static void RegisterTransient<TInterface, TImplementation>(
        this DependencyContainerBuilder dependencyContainerBuilder,
        Key<TInterface> key
    )
        where TInterface : notnull
        where TImplementation : TInterface, new()
    {
        dependencyContainerBuilder.Register(key, factory: _ => new TImplementation(), lifeTime: LifeTime.Transient);
    }

    public static void RegisterTransient<T>(
        this DependencyContainerBuilder dependencyContainerBuilder
    ) where T : notnull, new()
    {
        dependencyContainerBuilder.Register(key: Key.Of<T>(), factory: _ => new T(), lifeTime: LifeTime.Transient);
    }

    public static void RegisterTransient<TInterface, TImplementation>(
        this DependencyContainerBuilder dependencyContainerBuilder
    )
        where TInterface : notnull
        where TImplementation : TInterface, new()
    {
        dependencyContainerBuilder.Register(
            key: Key.Of<TInterface>(),
            factory: _ => new TImplementation(),
            lifeTime: LifeTime.Transient
        );
    }
    #endregion

    #region Scoped
    public static void RegisterScoped<T>(
        this DependencyContainerBuilder dependencyContainerBuilder,
        Key<T> key,
        Func<IDependencyResolver, T> factory
    ) where T : notnull
    {
        dependencyContainerBuilder.Register(key, factory, lifeTime: LifeTime.Scoped);
    }

    public static void RegisterScoped<T>(
        this DependencyContainerBuilder dependencyContainerBuilder,
        Key<T> key,
        Func<T> factory
    ) where T : notnull
    {
        dependencyContainerBuilder.Register(key, factory: _ => factory.Invoke(), lifeTime: LifeTime.Scoped);
    }

    public static void RegisterScoped<T>(
        this DependencyContainerBuilder dependencyContainerBuilder,
        Func<IDependencyResolver, T> factory
    ) where T : notnull
    {
        dependencyContainerBuilder.Register(key: Key.Of<T>(), factory, lifeTime: LifeTime.Scoped);
    }

    public static void RegisterScoped<T>(
        this DependencyContainerBuilder dependencyContainerBuilder,
        Func<T> factory
    ) where T : notnull
    {
        dependencyContainerBuilder.Register(
            key: Key.Of<T>(),
            factory: _ => factory.Invoke(),
            lifeTime: LifeTime.Scoped
        );
    }

    public static void RegisterScoped<T>(
        this DependencyContainerBuilder dependencyContainerBuilder,
        Key<T> key
    ) where T : notnull, new()
    {
        dependencyContainerBuilder.Register(key, factory: _ => new T(), lifeTime: LifeTime.Scoped);
    }

    public static void RegisterScoped<TInterface, TImplementation>(
        this DependencyContainerBuilder dependencyContainerBuilder,
        Key<TInterface> key
    )
        where TInterface : notnull
        where TImplementation : TInterface, new()
    {
        dependencyContainerBuilder.Register(key, factory: _ => new TImplementation(), lifeTime: LifeTime.Scoped);
    }

    public static void RegisterScoped<T>(
        this DependencyContainerBuilder dependencyContainerBuilder
    ) where T : notnull, new()
    {
        dependencyContainerBuilder.Register(key: Key.Of<T>(), factory: _ => new T(), lifeTime: LifeTime.Scoped);
    }

    public static void RegisterScoped<TInterface, TImplementation>(
        this DependencyContainerBuilder dependencyContainerBuilder
    )
        where TInterface : notnull
        where TImplementation : TInterface, new()
    {
        dependencyContainerBuilder.Register(
            key: Key.Of<TInterface>(),
            factory: _ => new TImplementation(),
            lifeTime: LifeTime.Scoped
        );
    }
    #endregion

    #region Singleton
    public static void RegisterSingleton<T>(
        this DependencyContainerBuilder dependencyContainerBuilder,
        Key<T> key,
        Func<IDependencyResolver, T> factory
    ) where T : notnull
    {
        dependencyContainerBuilder.Register(key, factory, lifeTime: LifeTime.Singleton);
    }

    public static void RegisterSingleton<T>(
        this DependencyContainerBuilder dependencyContainerBuilder,
        Key<T> key,
        Func<T> factory
    ) where T : notnull
    {
        dependencyContainerBuilder.Register(key, factory: _ => factory.Invoke(), lifeTime: LifeTime.Singleton);
    }

    public static void RegisterSingleton<T>(
        this DependencyContainerBuilder dependencyContainerBuilder,
        Func<IDependencyResolver, T> factory
    ) where T : notnull
    {
        dependencyContainerBuilder.Register(key: Key.Of<T>(), factory, lifeTime: LifeTime.Singleton);
    }

    public static void RegisterSingleton<T>(
        this DependencyContainerBuilder dependencyContainerBuilder,
        Func<T> factory
    ) where T : notnull
    {
        dependencyContainerBuilder.Register(
            key: Key.Of<T>(),
            factory: _ => factory.Invoke(),
            lifeTime: LifeTime.Singleton
        );
    }

    public static void RegisterSingleton<T>(
        this DependencyContainerBuilder dependencyContainerBuilder,
        Key<T> key
    ) where T : notnull, new()
    {
        dependencyContainerBuilder.Register(key, factory: _ => new T(), lifeTime: LifeTime.Singleton);
    }

    public static void RegisterSingleton<TInterface, TImplementation>(
        this DependencyContainerBuilder dependencyContainerBuilder,
        Key<TInterface> key
    )
        where TInterface : notnull
        where TImplementation : TInterface, new()
    {
        dependencyContainerBuilder.Register(key, factory: _ => new TImplementation(), lifeTime: LifeTime.Singleton);
    }

    public static void RegisterSingleton<T>(
        this DependencyContainerBuilder dependencyContainerBuilder
    ) where T : notnull, new()
    {
        dependencyContainerBuilder.Register(key: Key.Of<T>(), factory: _ => new T(), lifeTime: LifeTime.Singleton);
    }

    public static void RegisterSingleton<TInterface, TImplementation>(
        this DependencyContainerBuilder dependencyContainerBuilder
    )
        where TInterface : notnull
        where TImplementation : TInterface, new()
    {
        dependencyContainerBuilder.Register(
            key: Key.Of<TInterface>(),
            factory: _ => new TImplementation(),
            lifeTime: LifeTime.Singleton
        );
    }
    #endregion

    #region Instance
    public static void RegisterSingleton<T>(
        this DependencyContainerBuilder dependencyContainerBuilder,
        Key<T> key,
        T instance
    ) where T : notnull
    {
        dependencyContainerBuilder.Register(key, factory: _ => instance, LifeTime.Singleton);
    }
    #endregion
}
