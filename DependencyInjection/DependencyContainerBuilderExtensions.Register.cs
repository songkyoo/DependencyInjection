// <auto-generated />
namespace Macaron.DependencyInjection;

partial class DependencyContainerBuilderExtensions
{
    #region Transient
    public static void RegisterTransient<T>(
        this DependencyContainerBuilder dependencyContainerBuilder,
        Key<T> key,
        Func<IDependencyResolver, T> factory
    ) where T : notnull
    {
        dependencyContainerBuilder.Register(key, factory, LifeTime.Transient);
    }

    public static void RegisterTransient<T>(
        this DependencyContainerBuilder dependencyContainerBuilder,
        Key<T> key,
        Func<T> factory
    ) where T : notnull
    {
        dependencyContainerBuilder.Register(key, factory: _ => factory.Invoke(), LifeTime.Transient);
    }

    public static void RegisterTransient<T>(
        this DependencyContainerBuilder dependencyContainerBuilder,
        Func<IDependencyResolver, T> factory
    ) where T : notnull
    {
        dependencyContainerBuilder.Register(Key.Of<T>(), factory, LifeTime.Transient);
    }

    public static void RegisterTransient<T>(
        this DependencyContainerBuilder dependencyContainerBuilder,
        Func<T> factory
    ) where T : notnull
    {
        dependencyContainerBuilder.Register(Key.Of<T>(), factory: _ => factory.Invoke(), LifeTime.Transient);
    }

    public static void RegisterTransient<T>(
        this DependencyContainerBuilder dependencyContainerBuilder,
        Key<T> key
    ) where T : notnull, new()
    {
        dependencyContainerBuilder.Register(key, factory: _ => new T(), LifeTime.Transient);
    }

    public static void RegisterTransient<T>(
        this DependencyContainerBuilder dependencyContainerBuilder
    ) where T : notnull, new()
    {
        dependencyContainerBuilder.Register(Key.Of<T>(), factory: _ => new T(), LifeTime.Transient);
    }
    #endregion

    #region Scoped
    public static void RegisterScoped<T>(
        this DependencyContainerBuilder dependencyContainerBuilder,
        Key<T> key,
        Func<IDependencyResolver, T> factory
    ) where T : notnull
    {
        dependencyContainerBuilder.Register(key, factory, LifeTime.Scoped);
    }

    public static void RegisterScoped<T>(
        this DependencyContainerBuilder dependencyContainerBuilder,
        Key<T> key,
        Func<T> factory
    ) where T : notnull
    {
        dependencyContainerBuilder.Register(key, factory: _ => factory.Invoke(), LifeTime.Scoped);
    }

    public static void RegisterScoped<T>(
        this DependencyContainerBuilder dependencyContainerBuilder,
        Func<IDependencyResolver, T> factory
    ) where T : notnull
    {
        dependencyContainerBuilder.Register(Key.Of<T>(), factory, LifeTime.Scoped);
    }

    public static void RegisterScoped<T>(
        this DependencyContainerBuilder dependencyContainerBuilder,
        Func<T> factory
    ) where T : notnull
    {
        dependencyContainerBuilder.Register(Key.Of<T>(), factory: _ => factory.Invoke(), LifeTime.Scoped);
    }

    public static void RegisterScoped<T>(
        this DependencyContainerBuilder dependencyContainerBuilder,
        Key<T> key
    ) where T : notnull, new()
    {
        dependencyContainerBuilder.Register(key, factory: _ => new T(), LifeTime.Scoped);
    }

    public static void RegisterScoped<T>(
        this DependencyContainerBuilder dependencyContainerBuilder
    ) where T : notnull, new()
    {
        dependencyContainerBuilder.Register(Key.Of<T>(), factory: _ => new T(), LifeTime.Scoped);
    }
    #endregion

    #region Singleton
    public static void RegisterSingleton<T>(
        this DependencyContainerBuilder dependencyContainerBuilder,
        Key<T> key,
        Func<IDependencyResolver, T> factory
    ) where T : notnull
    {
        dependencyContainerBuilder.Register(key, factory, LifeTime.Singleton);
    }

    public static void RegisterSingleton<T>(
        this DependencyContainerBuilder dependencyContainerBuilder,
        Key<T> key,
        Func<T> factory
    ) where T : notnull
    {
        dependencyContainerBuilder.Register(key, factory: _ => factory.Invoke(), LifeTime.Singleton);
    }

    public static void RegisterSingleton<T>(
        this DependencyContainerBuilder dependencyContainerBuilder,
        Func<IDependencyResolver, T> factory
    ) where T : notnull
    {
        dependencyContainerBuilder.Register(Key.Of<T>(), factory, LifeTime.Singleton);
    }

    public static void RegisterSingleton<T>(
        this DependencyContainerBuilder dependencyContainerBuilder,
        Func<T> factory
    ) where T : notnull
    {
        dependencyContainerBuilder.Register(Key.Of<T>(), factory: _ => factory.Invoke(), LifeTime.Singleton);
    }

    public static void RegisterSingleton<T>(
        this DependencyContainerBuilder dependencyContainerBuilder,
        Key<T> key
    ) where T : notnull, new()
    {
        dependencyContainerBuilder.Register(key, factory: _ => new T(), LifeTime.Singleton);
    }

    public static void RegisterSingleton<T>(
        this DependencyContainerBuilder dependencyContainerBuilder
    ) where T : notnull, new()
    {
        dependencyContainerBuilder.Register(Key.Of<T>(), factory: _ => new T(), LifeTime.Singleton);
    }
    #endregion

}
